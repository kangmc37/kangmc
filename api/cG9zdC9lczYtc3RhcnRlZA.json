{"title":"","date":"2019-03-13T09:22:08.000Z","thumbnail":"https://s2.ax1x.com/2019/03/13/Ak1bWD.jpg","slug":"es6-started","tags":["ES6","Javascript"],"categories":["Web前端"],"updated":"2019-03-13T10:02:28.000Z","content":"<h1 id=\"ECMAScript6学习笔记\">ECMAScript6学习笔记<a href=\"post/es6-started#ECMAScript6学习笔记\"></a></h1><h2 id=\"1-let和const\">1. let和const<a href=\"post/es6-started#1-let和const\"></a></h2><p>ES6中，增加了<code>let</code>和<code>const</code>命令来声明变量。</p>\n<h3 id=\"1-1-let\">1.1 let<a href=\"post/es6-started#1-1-let\"></a></h3><p><code>let</code>命令的用法与<code>var</code>相似，但存在一下特点：</p>\n<ol>\n<li><p>不存在变量提升</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">111</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">222</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不允许重复声明</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a; <span class=\"comment\">// Uncaught SyntaxError...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不能在函数内重新声明参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"number\">1</span>; <span class=\"comment\">// Uncaught SyntaxError...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>暂时性死区</p>\n<p>1）只要块级作用域内存在<code>let</code>命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>\n<p>2）如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>\n<p>总之，在代码块内，使用<code>let</code>命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。</p>\n</li>\n</ol>\n<h3 id=\"1-2-const\">1.2 const<a href=\"post/es6-started#1-2-const\"></a></h3><p><code>const</code>用来声明一个只读的常量。其特点如下：</p>\n<ul>\n<li><code>const</code> 声明后，无法修改值；</li>\n<li><code>const</code> 声明时，必须赋值；</li>\n<li><code>const</code> 声明的常量，不能用<code>let</code>重复声明。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// const声明的值不能被修改，否则报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.1415926</span>;</span><br><span class=\"line\">PI = <span class=\"number\">3.14</span>; <span class=\"comment\">// Uncaught TypeError...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const声明的同时，必须赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a; <span class=\"comment\">// Uncaught SyntaxError...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const声明的常量，不能重复声明；</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">\"world\"</span>; <span class=\"comment\">// Uncaught SyntaxError...</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>const</code>的作用域与<code>let</code>命令相同：只在声明所在的块级作用域内有效。</li>\n<li><code>const</code>命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</li>\n<li><code>const</code>声明的常量，也与<code>let</code>一样不可重复声明。</li>\n</ul>\n<p><strong>本质</strong>：</p>\n<blockquote>\n<p><code>const</code>实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，<code>const</code>只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p>\n</blockquote>\n<h3 id=\"1-3-块级作用域\">1.3 块级作用域<a href=\"post/es6-started#1-3-块级作用域\"></a></h3><p><strong>应用场景</strong></p>\n<p>  1）内层变量可能会覆盖外层变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>函数内部的<code>if</code> 语句块重新声明了一个<code>tmp</code>变量，由于变量提升，这个声明被提升到函数作用域顶部，覆盖了全局中定义的<code>tmp</code>变量。</p>\n<p>  2）用来计数的循环变量泄露为全局变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(s[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，变量<code>i</code>只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</p>\n<p><strong>ES6的块级作用域</strong></p>\n<p><code>let</code>实际上为 JavaScript 新增了块级作用域。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6 允许块级作用域的任意嵌套</span></span><br><span class=\"line\">&#123;&#123;&#123;&#123;&#123;<span class=\"keyword\">let</span> insane = <span class=\"string\">'Hello World'</span>&#125;&#125;&#125;&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内层作用域可以定义外层作用域的同名变量</span></span><br><span class=\"line\">&#123;&#123;&#123;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> insane = <span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">  &#123;<span class=\"keyword\">let</span> insane = <span class=\"string\">'Hello World'</span>&#125;</span><br><span class=\"line\">&#125;&#125;&#125;&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>块级作用域与函数声明</strong></p>\n<p>ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。</p>\n<p>ES6 引入了块级作用域，明确允许在块级作用域之中声明函数。ES6 规定，块级作用域之中，函数声明语句的行为类似于<code>let</code>，在块级作用域之外不可引用。（理论上）</p>\n<h2 id=\"2-解构赋值\">2. 解构赋值<a href=\"post/es6-started#2-解构赋值\"></a></h2><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>\n<h3 id=\"2-1-基本用法\">2.1 基本用法<a href=\"post/es6-started#2-1-基本用法\"></a></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n<p><strong>规则</strong></p>\n<ul>\n<li>等号两边模式必须一致</li>\n<li>等号右边必须是可遍历的数据结构类型（具备 Iterator 接口）</li>\n<li>声明和赋值不能分开</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]];</span><br><span class=\"line\">foo; <span class=\"comment\">// 1</span></span><br><span class=\"line\">bar; <span class=\"comment\">// 2</span></span><br><span class=\"line\">baz; <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [arr, obj, num, str] = [[<span class=\"number\">1</span>, <span class=\"number\">2</span> , <span class=\"number\">3</span>], &#123;<span class=\"attr\">x</span>: <span class=\"number\">222</span>, <span class=\"attr\">y</span>: <span class=\"number\">333</span>&#125;, <span class=\"number\">999</span>, <span class=\"string\">\"hello world\"</span>];</span><br><span class=\"line\">arr; <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\">obj; <span class=\"comment\">// &#123;x: 222, y: 333&#125;</span></span><br><span class=\"line\">num; <span class=\"comment\">// 999</span></span><br><span class=\"line\">str; <span class=\"comment\">// \"hello world\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br></pre></td></tr></table></figure>\n<p><strong>对象的解构</strong>与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性有次序，变量必须与属性同名，才能取到正确的值。</p>\n<h3 id=\"2-2-解构赋值的默认值\">2.2 解构赋值的默认值<a href=\"post/es6-started#2-2-解构赋值的默认值\"></a></h3><p>解构赋值允许指定默认值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">'b'</span>] = [<span class=\"string\">'a'</span>]; <span class=\"comment\">// x='a', y='b'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">'b'</span>] = [<span class=\"string\">'a'</span>, <span class=\"literal\">undefined</span>]; <span class=\"comment\">// x='a', y='b'</span></span><br></pre></td></tr></table></figure>\n<p>ES6 内部使用严格相等运算符（ === ），判断一个位置是否有值。所以，只有当一个数组成员严格等于 undefined ，默认值才会生效。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">undefined</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">null</span>];</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-用途\">2.3 用途<a href=\"post/es6-started#2-3-用途\"></a></h3><p>1)  交换变量的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\">[x, y] = [y, x]; <span class=\"comment\">// x = 2, y = 1</span></span><br></pre></td></tr></table></figure>\n<p>2)  从函数返回多个值</p>\n<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返<br>回。有了解构赋值，取出这些值就非常方便。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">       foo: <span class=\"number\">1</span>,</span><br><span class=\"line\">       bar: <span class=\"number\">2</span></span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure>\n<p>3)  函数参数的定义<br>解构赋值可以方便地将一组参数与变量名对应起来。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\">                       </span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>4)  提取 JSON 数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</span><br><span class=\"line\">    id: <span class=\"number\">42</span>,</span><br><span class=\"line\">    status: <span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">    data: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number); <span class=\"comment\">// 42, \"OK\", [867, 5309]</span></span><br></pre></td></tr></table></figure>\n<p>5)  函数参数的默认值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    async = true,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    beforeSend = function (</span>) </span>&#123;&#125;,</span><br><span class=\"line\">    cache = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    complete = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">    crossDomain = <span class=\"literal\">false</span>,</span><br><span class=\"line\">    global = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// ... more config</span></span><br><span class=\"line\">&#125; = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>6)  遍历 Map 结构<br>任何部署了 Iterator 接口的对象，都可以用 for…of 循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">'first'</span>, <span class=\"string\">'hello'</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">'second'</span>, <span class=\"string\">'world'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果只想获取键名，或者只想获取键值，可以写成下面这样。</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [,value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>7)  输入模块的指定方法<br>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"source-map\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-字符串的扩展\">3. 字符串的扩展<a href=\"post/es6-started#3-字符串的扩展\"></a></h2><h3 id=\"3-1-includes-startsWith-endsWith\">3.1 includes(), startsWith(), endsWith()<a href=\"post/es6-started#3-1-includes-startsWith-endsWith\"></a></h3><ul>\n<li><strong>includes()</strong>：返回布尔值，表示是否找到了参数字符串。</li>\n<li><strong>startsWith()</strong> : 返回布尔值，表示参数字符串是否在原字符串的头部。</li>\n<li><strong>endsWith()</strong> : 返回布尔值，表示参数字符串是否在原字符串的尾部。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'Hello world!'</span>;</span><br><span class=\"line\">s.startsWith(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.endsWith(<span class=\"string\">'!'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.includes(<span class=\"string\">'o'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>这三个方法都支持第二个参数，表示开始搜索的位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'Hello world!'</span>;</span><br><span class=\"line\">s.startsWith(<span class=\"string\">'world'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.endsWith(<span class=\"string\">'Hello'</span>, <span class=\"number\">5</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.includes(<span class=\"string\">'Hello'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-repeat\">3.2 repeat()<a href=\"post/es6-started#3-2-repeat\"></a></h3><ul>\n<li><strong>repeat()</strong> : 返回一个新字符串，表示将原字符串重复 n 次。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"hello\"</span>.repeat(<span class=\"number\">2</span>); <span class=\"comment\">// \"hellohello\"</span></span><br><span class=\"line\"><span class=\"string\">\"na\"</span>.repeat(<span class=\"number\">0</span>); <span class=\"comment\">// \"\"</span></span><br></pre></td></tr></table></figure>\n<p><strong>规则</strong></p>\n<ul>\n<li>参数如果是小数，会被取整；</li>\n<li>如果 <code>repeat</code> 的参数是负数或者 <code>Infinity</code> ，会报错；</li>\n<li>如果参数是 0 到-1 之间的小数，则等同于 0；</li>\n<li>参数<code>NaN</code>等同于 0；</li>\n<li>如果 <code>repeat</code> 的参数是字符串，则会先转换成数字。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数是小数，先取整</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">2.9</span>) <span class=\"comment\">// \"nana\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是负数或者Infinity，报错</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"literal\">Infinity</span>) <span class=\"comment\">// RangeError</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">-1</span>) <span class=\"comment\">// RangeError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是 0 到-1 之间的小数，等同于0</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">-0.9</span>) <span class=\"comment\">// \"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是NaN，等同于0</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"literal\">NaN</span>) <span class=\"comment\">// \"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是字符串，则会先转换成数字</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"string\">'na'</span>) <span class=\"comment\">// \"\"</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"string\">'3'</span>) <span class=\"comment\">// \"nanana\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-padStart-padEnd\">3.3 padStart(), padEnd()<a href=\"post/es6-started#3-3-padStart-padEnd\"></a></h3><p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。 <code>padStart()</code> 用于头部补全，<code>padEnd()</code> 用于尾部补全。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">5</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'ababx'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">4</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'abax'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">5</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xabab'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">4</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xaba'</span></span><br></pre></td></tr></table></figure>\n<p><code>padStart</code> 和 <code>padEnd</code> 一共接受两个参数，第一个参数用来指定字符串的最小长度，第二个参数是用来补全的字符串。</p>\n<p><strong>规则</strong></p>\n<ul>\n<li>如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串；</li>\n<li>如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串；</li>\n<li>如果省略第二个参数，默认使用空格补全长度。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'xxx'</span>.padStart(<span class=\"number\">2</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xxx'</span></span><br><span class=\"line\"><span class=\"string\">'xxx'</span>.padEnd(<span class=\"number\">2</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xxx'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'abc'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0123456789'</span>) <span class=\"comment\">// '0123456abc'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">4</span>) <span class=\"comment\">// ' x'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">4</span>) <span class=\"comment\">// 'x '</span></span><br></pre></td></tr></table></figure>\n<p><strong>用途</strong></p>\n<p>1)  <code>padStart</code> 的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'1'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000001\"</span></span><br><span class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000012\"</span></span><br><span class=\"line\"><span class=\"string\">'123456'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000123456\"</span></span><br></pre></td></tr></table></figure>\n<p>2)  另一个用途是提示字符串格式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-MM-12\"</span></span><br><span class=\"line\"><span class=\"string\">'09-12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-09-12\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-4-matchAll\">3.4 matchAll()<a href=\"post/es6-started#3-4-matchAll\"></a></h3><p><code>matchAll</code> 方法返回一个正则表达式在当前字符串的所有匹配。</p>\n<h3 id=\"3-5-其他新增的方法\">3.5 其他新增的方法<a href=\"post/es6-started#3-5-其他新增的方法\"></a></h3><h2 id=\"3-5-1-codePointAt\">3.5.1 codePointAt()<a href=\"post/es6-started#3-5-1-codePointAt\"></a></h2><h2 id=\"3-5-2-String-fromCodePoint\">3.5.2 String.fromCodePoint()<a href=\"post/es6-started#3-5-2-String-fromCodePoint\"></a></h2><h2 id=\"3-5-3-normalize\">3.5.3 normalize()<a href=\"post/es6-started#3-5-3-normalize\"></a></h2><h3 id=\"3-6-字符串的遍历器接口\">3.6 字符串的遍历器接口<a href=\"post/es6-started#3-6-字符串的遍历器接口\"></a></h3><p>ES6 为字符串添加了遍历器接口（详见《Iterator》一章），使得字符串可以被 <code>for...of</code>循环遍历。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> l <span class=\"keyword\">of</span> <span class=\"string\">\"hello\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(l);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"h\"  \"e\"  \"l\"  \"l\"  \"o\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-7-模板字符串\">3.7 模板字符串<a href=\"post/es6-started#3-7-模板字符串\"></a></h3>","next":{"title":"Hello World","slug":"hello-world"},"link":"kangmc37.github.io/post/es6-started/","toc":[{"title":"ECMAScript6学习笔记","id":"ECMAScript6学习笔记","index":"1","children":[{"title":"1. let和const","id":"1-let和const","index":"1.1","children":[{"title":"1.1 let","id":"1-1-let","index":"1.1.1"},{"title":"1.2 const","id":"1-2-const","index":"1.1.2"},{"title":"1.3 块级作用域","id":"1-3-块级作用域","index":"1.1.3"}]},{"title":"2. 解构赋值","id":"2-解构赋值","index":"1.2","children":[{"title":"2.1 基本用法","id":"2-1-基本用法","index":"1.2.1"},{"title":"2.2 解构赋值的默认值","id":"2-2-解构赋值的默认值","index":"1.2.2"},{"title":"2.3 用途","id":"2-3-用途","index":"1.2.3"}]},{"title":"3. 字符串的扩展","id":"3-字符串的扩展","index":"1.3","children":[{"title":"3.1 includes(), startsWith(), endsWith()","id":"3-1-includes-startsWith-endsWith","index":"1.3.1"},{"title":"3.2 repeat()","id":"3-2-repeat","index":"1.3.2"},{"title":"3.3 padStart(), padEnd()","id":"3-3-padStart-padEnd","index":"1.3.3"},{"title":"3.4 matchAll()","id":"3-4-matchAll","index":"1.3.4"},{"title":"3.6 字符串的遍历器接口","id":"3-6-字符串的遍历器接口","index":"1.3.5"},{"title":"3.7 模板字符串","id":"3-7-模板字符串","index":"1.3.6"}]}]}],"copyright":{"author":"Kangmc","link":"<a href=\"kangmc37.github.io/post/es6-started/\" title=\"\">kangmc37.github.io/post/es6-started/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}